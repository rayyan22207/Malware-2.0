import socket
import threading
import os
import json
import platform

# Choosing Nickname

def get_public_ip():
    import requests
    response = requests.get('https://httpbin.org/ip')
    return response.json().get('origin')

def get_device_info():
    device_name = socket.gethostname()
    operating_system = os.name  # This might not be as detailed as on the server side
    architecture = platform.architecture()
    processor = platform.processor()
    machine = platform.machine()

    try:
        # Additional information for Linux and macOS
        if operating_system == 'posix':
            distribution = platform.linux_distribution()
            dist_name = distribution[0] if distribution else 'Unknown'
        elif operating_system == 'Darwin':
            dist_name = 'macOS'
        else:
            dist_name = 'N/A'

    except Exception as e:
        dist_name = 'N/A'

    device_info = {
        "Device Name": device_name,
        "Operating System": operating_system,
        "Distribution/Version": dist_name,
        "Architecture": architecture[0],
        "Processor": processor,
        "Machine": machine,
    }

    return device_info

# Connecting To Server
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(('127.0.0.1', 55555))

# Listening to Server and Sending Nickname
def receive():
    while True:
        try:
            # Receive Message From Server
            message = client.recv(1024).decode('utf-8')
            if message == 'device name':
                client.send(socket.gethostname().encode('utf-8'))
            elif message == 'IP':
                client.send(get_public_ip().encode('utf-8'))
            elif message == 'System info':
                client.send(json.dumps(get_device_info()).encode('utf-8'))
            else:
                print(message)
        except:
            # Close Connection When Error
            print("An error occurred!")
            client.close()
            break

# Start the receive thread
receive_thread = threading.Thread(target=receive)
receive_thread.start()

# Continuously get input from the client to send messages
while True:
    message = input()
    client.send(message.encode('utf-8'))
